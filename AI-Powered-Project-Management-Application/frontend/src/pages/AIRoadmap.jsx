import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Container,
  Typography,
  Paper,
  Box,
  Button,
  CircularProgress,
  TextField,
  Alert,
  useTheme,
  alpha,
  Card,
  CardContent,
  Chip,
  Divider
} from '@mui/material';
import {
  AutoAwesome as AutoAwesomeIcon,
  Lightbulb as LightbulbIcon,
  TaskAlt as TaskAltIcon,
  ArrowForward as ArrowForwardIcon,
  ArrowBack as ArrowBackIcon,
  Code as CodeIcon
} from '@mui/icons-material';
import { generateRoadmap } from '../services/api';
import { useProjectContext } from '../context/ProjectContext';
import { useOrganizationContext } from '../context/OrganizationContext';
import ReactMarkdown from 'react-markdown';

const AIRoadmap = () => {
  const navigate = useNavigate();
  const theme = useTheme();
  const { createProjectWithRoadmap } = useProjectContext();
  const { currentOrganization } = useOrganizationContext();
  
  // State variables for creating a project and generating a roadmap
  const [projectInfo, setProjectInfo] = useState({
    title: '',
    description: '',
    problem_statement: '',
    priority: 'medium',
    deadline: ''
  });
  const [roadmapData, setRoadmapData] = useState(null);
  const [roadmapGenerated, setRoadmapGenerated] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  // State for refinement prompt
  const [refinementPrompt, setRefinementPrompt] = useState('');
  
  // Auto-generate roadmap when form has sufficient data
  const [formComplete, setFormComplete] = useState(false);
  const [autoGeneratedOnce, setAutoGeneratedOnce] = useState(false);

  // Helper function to calculate project complexity based on description and problem statement
  const calculateProjectComplexity = (description = '', problemStatement = '') => {
    const combinedText = (description + ' ' + problemStatement).toLowerCase();
    
    // Define complexity indicators
    const complexityKeywords = {
      high: [
        'complex', 'advanced', 'sophisticated', 'extensive', 'comprehensive', 'enterprise',
        'microservices', 'distributed', 'real-time', 'ai', 'ml', 'machine learning',
        'blockchain', 'scalable', 'high-performance', 'multi-tenant', 'big data'
      ],
      medium: [
        'moderate', 'standard', 'typical', 'conventional', 'regular', 'normal',
        'api', 'integration', 'dashboard', 'authentication', 'authorization'
      ],
      low: [
        'simple', 'basic', 'minimal', 'straightforward', 'easy', 'small', 'prototype',
        'mvp', 'proof of concept', 'poc', 'single-page', 'static'
      ]
    };
    
    // Count matches for each complexity level
    const highCount = complexityKeywords.high.filter(word => 
      combinedText.includes(word)).length;
      
    const mediumCount = complexityKeywords.medium.filter(word => 
      combinedText.includes(word)).length;
      
    const lowCount = complexityKeywords.low.filter(word => 
      combinedText.includes(word)).length;
    
    // Determine complexity based on keyword counts
    if (highCount > (mediumCount + lowCount)) {
      return 'high';
    } else if (lowCount > (highCount + mediumCount)) {
      return 'low';
    } else {
      return 'medium';
    }
  };

  const handleGenerateRoadmap = useCallback(async (isRefinement = false) => {
    setIsLoading(true);
    setError('');
    
    try {
      if (!projectInfo.title) {
        setError('Project title is required');
        setIsLoading(false);
        return;
      }
      
      // Calculate project complexity based on description
      const projectComplexity = calculateProjectComplexity(
        projectInfo.description,
        projectInfo.problem_statement || ''
      );
      
      // Set up options for roadmap generation
      const options = {
        problem_statement: projectInfo.problem_statement || projectInfo.description,
        priority: projectInfo.priority || 'medium',
        project_complexity: projectComplexity
      };
      
      // Add refinement information if this is a refinement request
      if (isRefinement && refinementPrompt && roadmapData) {
        options.is_refinement = true;
        options.refinement_instructions = refinementPrompt;
        options.existing_roadmap = JSON.stringify(roadmapData);
      }
      
      const response = await generateRoadmap(
        projectInfo.title,
        projectInfo.description,
        projectInfo.deadline,
        options
      );
      
      if (response && response.data) {
        setRoadmapData(response.data);
        setRoadmapGenerated(true);
        setSuccess(isRefinement ? 
          'Roadmap refined successfully! Review the updated version below.' : 
          'Software roadmap generated successfully! Review it below.');
        
        // Reset refinement state if we were refining
        if (isRefinement) {
          setRefinementPrompt('');
        }
      } else {
        setError('Failed to generate roadmap - no data received');
      }
    } catch (error) {
      console.error('Error generating roadmap:', error);
      setError(`Error generating roadmap: ${error.message || 'Unknown error'}`);
    } finally {
      setIsLoading(false);
    }
  }, [projectInfo, refinementPrompt, roadmapData]);

  // Check if form has enough data to trigger auto-generation
  useEffect(() => {
    if (projectInfo.title && 
        (projectInfo.description || projectInfo.problem_statement) && 
        !autoGeneratedOnce && 
        !roadmapGenerated && 
        !isLoading) {
      setFormComplete(true);
    } else {
      setFormComplete(false);
    }
  }, [projectInfo, autoGeneratedOnce, roadmapGenerated, isLoading]);

  // Trigger roadmap generation automatically when form is complete
  useEffect(() => {
    if (formComplete) {
      handleGenerateRoadmap();
      setAutoGeneratedOnce(true);
    }
  }, [formComplete, handleGenerateRoadmap]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setProjectInfo(prev => ({
      ...prev,
      [name]: value
    }));
    
    // If we already generated a roadmap, and the key fields change, enable regeneration
    if (autoGeneratedOnce && roadmapGenerated && (name === 'title' || name === 'description' || name === 'problem_statement')) {
      setAutoGeneratedOnce(false);
    }
  };

  const handleAcceptRoadmap = async () => {
    setIsLoading(true);
    setError(''); // Clear previous errors
    
    try {
      // Extract the roadmap content as plain text
      const roadmapText = roadmapData.content || '';
      
      // Create a simple task list from the roadmap content
      const tasksList = extractTasksFromRoadmap(roadmapText);
      
      const newProject = await createProjectWithRoadmap(
        currentOrganization?.id,
        projectInfo.title,
        projectInfo.description,
        projectInfo.priority,
        projectInfo.deadline,
        roadmapText,
        tasksList
      );
      
      // Navigate to the new project
      navigate(`/projects/${newProject.id}`);
    } catch (error) {
      console.error("Error creating project with roadmap:", error);
      setError(`Failed to create project: ${error.message || 'Unknown error'}`);
    } finally {
      setIsLoading(false);
    }
  };
  
  // Helper function to extract tasks from roadmap content
  const extractTasksFromRoadmap = (roadmapText) => {
    if (!roadmapText) return '';
    
    try {
      // Extract all bullet points (list items) from the text
      const tasks = [];
      const lines = roadmapText.split('\n');
      
      lines.forEach(line => {
        // Look for lines that start with - or *
        const trimmedLine = line.trim();
        if (trimmedLine.startsWith('-') || trimmedLine.startsWith('*')) {
          // Extract the task description (remove the bullet point)
          const taskText = trimmedLine.substring(1).trim();
          if (taskText) {
            tasks.push(taskText);
          }
        }
      });
      
      // Format as a simple numbered list
      return tasks.map((task, index) => `${index + 1}. ${task}`).join('\n');
    } catch (error) {
      console.error('Error extracting tasks from roadmap:', error);
      return '';
    }
  };

  return (
    <Container maxWidth="lg">
      <Box mb={3}>
        <Box
          sx={{
            mb: 4,
            display: 'flex',
            flexDirection: { xs: 'column', md: 'row' },
            justifyContent: 'space-between',
            alignItems: { xs: 'flex-start', md: 'center' },
            gap: 2
          }}
        >
          <Box>
            <Typography 
              variant="h4" 
              sx={{ 
                fontWeight: 700,
                background: theme => `linear-gradient(90deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`,
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                mb: 0.5,
                display: 'flex',
                alignItems: 'center',
                gap: 1
              }}
            >
              <AutoAwesomeIcon fontSize="large" sx={{ opacity: 0.8 }} /> AI Roadmap Generator
            </Typography>
            <Typography variant="body1" color="text.secondary">
              Create an AI-powered roadmap for your project
            </Typography>
          </Box>
          
          <Button
            variant="outlined"
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate('/projects')}
            sx={{ 
              borderRadius: 2,
              py: 1.2,
              px: 3,
              fontWeight: 'medium'
            }}
          >
            Back to Projects
          </Button>
        </Box>
      </Box>

      {error && (
        <Alert 
          severity="error" 
          sx={{ 
            mb: 3, 
            borderRadius: 2,
            boxShadow: theme => `0 2px 8px ${alpha(theme.palette.error.main, 0.15)}`
          }}
          onClose={() => setError('')}
        >
          {error}
        </Alert>
      )}

      {success && (
        <Alert 
          severity="success" 
          sx={{ 
            mb: 3, 
            borderRadius: 2,
            boxShadow: theme => `0 2px 8px ${alpha(theme.palette.success.main, 0.15)}`
          }}
          onClose={() => setSuccess('')}
        >
          {success}
        </Alert>
      )}

      <Box sx={{ mb: 4 }}>
        {!roadmapGenerated ? (
          <Card 
            elevation={0} 
            sx={{ 
              borderRadius: 3,
              mb: 4,
              border: theme => `1px solid ${alpha(theme.palette.primary.main, 0.1)}`,
              backdropFilter: 'blur(10px)'
            }}
          >
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 3 }}>
                <LightbulbIcon 
                  color="warning" 
                  fontSize="large" 
                  sx={{ 
                    mr: 2, 
                    mt: 0.5,
                    bgcolor: theme => alpha(theme.palette.warning.main, 0.15),
                    p: 1,
                    borderRadius: 2
                  }} 
                />
                <Box>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
                    <Typography variant="h6" fontWeight="medium">
                      Project Details
                    </Typography>
                    <Chip
                      label="Software Development Focused"
                      size="small"
                      color="primary"
                      icon={<CodeIcon />}
                      sx={{ ml: 1.5, borderRadius: '12px', fontWeight: 500 }}
                    />
                  </Box>
                  <Typography variant="body2" color="text.secondary">
                    Enter your project details below. Our AI will generate a tailored software development roadmap following industry best practices.
                  </Typography>
                </Box>
              </Box>
              
              <Box component="form" sx={{ mb: 3 }}>
                <TextField
                  fullWidth
                  label="Project Title"
                  name="title"
                  value={projectInfo.title}
                  onChange={handleInputChange}
                  margin="normal"
                  required
                  sx={{ 
                    mb: 2,
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2
                    }
                  }}
                />
                
                <TextField
                  fullWidth
                  label="Project Description"
                  name="description"
                  value={projectInfo.description}
                  onChange={handleInputChange}
                  margin="normal"
                  multiline
                  rows={3}
                  sx={{ 
                    mb: 2,
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2
                    }
                  }}
                />
                
                <TextField
                  fullWidth
                  label="Problem Statement / Requirements"
                  name="problem_statement"
                  value={projectInfo.problem_statement}
                  onChange={handleInputChange}
                  margin="normal"
                  multiline
                  rows={3}
                  sx={{ 
                    mb: 2,
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2
                    }
                  }}
                />
                
                <TextField
                  fullWidth
                  label="Deadline (optional)"
                  name="deadline"
                  type="date"
                  value={projectInfo.deadline}
                  onChange={handleInputChange}
                  margin="normal"
                  InputLabelProps={{ shrink: true }}
                  sx={{ 
                    mb: 2,
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2
                    }
                  }}
                />
              </Box>
              
              <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={() => handleGenerateRoadmap()}
                  disabled={isLoading || !projectInfo.title}
                  startIcon={isLoading ? <CircularProgress size={20} color="inherit" /> : <AutoAwesomeIcon />}
                  sx={{ 
                    borderRadius: 2,
                    py: 1.2,
                    px: 4,
                    fontWeight: 'medium',
                    boxShadow: theme => `0 4px 14px ${alpha(theme.palette.primary.main, 0.4)}`
                  }}
                >
                  {isLoading ? 'Generating...' : 'Generate Roadmap'}
                </Button>
              </Box>
            </CardContent>
          </Card>
        ) : (
          <Box sx={{ mt: 2 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
              <Typography variant="h5" fontWeight="bold">
                Project Roadmap
              </Typography>
            </Box>
            
            <Paper
              elevation={0}
              sx={{ 
                borderRadius: 3,
                p: 3,
                border: theme => `1px solid ${alpha(theme.palette.primary.main, 0.1)}`,
              }}
            >
              <Typography 
                variant="h6" 
                gutterBottom 
                color="text.secondary" 
                sx={{ mb: 3, fontWeight: 'medium' }}
              >
                {`Roadmap for ${projectInfo.title}`}
              </Typography>
              
              {/* Display roadmap content as markdown */}
              {roadmapData && roadmapData.content && (
                <Box sx={{ 
                  p: 2, 
                  bgcolor: alpha(theme.palette.background.paper, 0.5),
                  borderRadius: 2,
                  border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}`,
                  mb: 3
                }}>
                  <ReactMarkdown>{roadmapData.content}</ReactMarkdown>
                </Box>
              )}
              
              <Divider sx={{ my: 3 }} />
              
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Button
                  variant="outlined"
                  startIcon={<ArrowBackIcon />}
                  onClick={() => setRoadmapGenerated(false)}
                  sx={{ 
                    borderRadius: 2,
                    py: 1.2,
                    px: 3,
                    fontWeight: 'medium'
                  }}
                >
                  Back to Project Info
                </Button>
                
                <Button
                  variant="contained"
                  color="success"
                  onClick={handleAcceptRoadmap}
                  disabled={isLoading}
                  startIcon={isLoading ? <CircularProgress size={20} color="inherit" /> : <TaskAltIcon />}
                  endIcon={<ArrowForwardIcon />}
                  sx={{ 
                    borderRadius: 2,
                    py: 1.2,
                    px: 3,
                    fontWeight: 'medium',
                    boxShadow: theme => `0 4px 14px ${alpha(theme.palette.success.main, 0.4)}`
                  }}
                >
                  {isLoading ? 'Processing...' : 'Create Project & Accept Roadmap'}
                </Button>
              </Box>
            </Paper>
          </Box>
        )}
      </Box>
    </Container>
  );
};

export default AIRoadmap; 